#汉诺塔动画演示
import 海龟
from 内置函数汉化 import *
from 常量汉化 import *
from 内置类方法汉化 import *

圆盘 = []
A柱位置, B柱位置, C柱位置 = [], [], []
A柱圆盘数, B柱圆盘数, C柱圆盘数 = 0, 0, 0
A柱顶部 = [-180, 125]
B柱顶部 = [0, 125]
C柱顶部= [180, 125]
A = [A柱顶部, A柱位置, A柱圆盘数]
B = [B柱顶部, B柱位置, B柱圆盘数]
C = [C柱顶部, C柱位置, C柱圆盘数]
m = 0

def 生成圆盘(n):
    global 圆盘, A柱位置, B柱位置, C柱位置
    海龟.轨迹(否)
    for i in 范围(n):
        列表追加(圆盘, "")
        圆盘[i] = 海龟.新海龟(方形)
        圆盘[i].形状大小(1,8-i)
        圆盘[i].画笔抬起()
        圆盘[i].前往(-180,-95+20*i)
        列表追加(A柱位置, "")
        列表追加(B柱位置, "")
        列表追加(C柱位置, "")
        A柱位置[i] = [圆盘[i].x坐标(), 圆盘[i].y坐标()]
        B柱位置[i] = [圆盘[i].x坐标()+180, 圆盘[i].y坐标()]
        C柱位置[i] = [圆盘[i].x坐标()+360, 圆盘[i].y坐标()]
    海龟.轨迹(是)

def 搭建汉诺塔(n):
    海龟.轨迹(否)
    海龟.画笔粗细(5)
    海龟.画笔抬起()
    海龟.前往(-270,-105)
    海龟.画笔落下()
    for l in 范围(3):
        海龟.前进(90)
        海龟.左转(90)
        海龟.前进(210)
        海龟.后退(210)
        海龟.右转(90)
        海龟.前进(90)
    海龟.画笔抬起()
    海龟.后退(450)
    海龟.右转(90)
    海龟.前进(30)
    海龟.左转(90)
    海龟.书写('A', font=('Arial',16, 粗体))
    海龟.前进(180)
    海龟.书写('B', font=('Arial',16, 粗体))
    海龟.前进(180)
    海龟.书写('C', font=('Arial',16, 粗体))
    海龟.隐藏海龟()
    海龟.轨迹(是)
    生成圆盘(n)

def 移动圆盘(n, 起始 = A, 经过 = B, 目标 = C):
    if n == 1:
        圆盘[m-n].速度(1)
        圆盘[m-n].前往(起始[0])
        圆盘[m-n].前往(目标[0])
        圆盘[m-n].前往(目标[1][目标[2]])
        起始[2] -= 1
        目标[2] += 1
    else:
        移动圆盘(n-1, 起始, 目标, 经过)
        圆盘[m-n].速度(1)
        圆盘[m-n].前往(起始[0])
        圆盘[m-n].前往(目标[0])
        圆盘[m-n].前往(目标[1][目标[2]])
        起始[2] -= 1
        目标[2] += 1
        移动圆盘(n-1, 经过, 起始, 目标)
    
def 主函数():
    try:
        n = 评估(输入("请输入圆盘数量(<= 7): "))
        海龟.设置()
        搭建汉诺塔(n)
        A柱圆盘数 = n
        m = n
        移动圆盘(n)
        海龟.前往(-70, 150)
        海龟.书写("移动完成",font=("SimHei", 30))
        海龟.完成()
    except:
        显示("输入错误")

if __name__ == "__main__":
    主函数()